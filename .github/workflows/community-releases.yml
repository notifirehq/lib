name: Prepare Self-hosted Release

on:
  workflow_dispatch:
    branches:
      - prod

permissions:
  contents: write
  packages: write
  deployments: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    outputs:
      lerna-release-version: ${{ steps.get_version.outputs.lerna-release-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Current Lerna Release version
        id: get_version
        shell: bash
        run: |
          echo "LERNA_RELEASE_VERSION=$(lerna ls --json | jq -r '.[] | select(.name == "novu") | .version')" >> $GITHUB_OUTPUT

  docker_build:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 80
    environment: Development
    strategy:
      fail-fast: false
      matrix:
        name: ['novu/api','novu/worker','novu/inbound-mail','novu/web','novu/webhook','novu/widget','novu/ws','novu/embed']
    steps:
      - uses: actions/checkout@v4

      - name: Variables
        shell: bash
        run: |
          service=${{ matrix.name }}
          echo "SERVICE_NAME=$(basename "${service//-/-}")" >> $GITHUB_ENV
          echo "REGISTRY_OWNER=novuhq" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.9.0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.8.1
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: ./.github/actions/setup-qemu

      - name: Login To Registry
        shell: bash
        env:
          GH_ACTOR: ${{ github.actor }}
          GH_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin

      - name: Build Community Docker Image with Buildx, tag, and test
        shell: bash
        env:
          DOCKER_BUILD_ARGUMENTS: >
            --cache-from type=registry,ref=ghcr.io/${{ env.REGISTRY_OWNER }}/cache:build-cache-${{ env.SERVICE_NAME }}-community
            --cache-to type=registry,ref=ghcr.io/${{ env.REGISTRY_OWNER }}/cache:build-cache-${{ env.SERVICE_NAME }}-community,mode=max
            --platform=linux/amd64,linux/arm64 --provenance=false
            --output=type=image,name=ghcr.io/${{ env.REGISTRY_OWNER }}/${{ env.SERVICE_NAME }},push-by-digest=true,name-canonical=true
        run: |
          if [ "${{ env.SERVICE_NAME }}" = "embed" ]; then
            cd libs/$SERVICE_NAME
          else
            cd apps/$SERVICE_NAME
          fi
          pnpm run docker:build
          docker images

      - name: Tag and Push docker image
        shell: bash
        run: |
          docker tag novu-$SERVICE_NAME ghcr.io/$REGISTRY_OWNER/$SERVICE_NAME:${{ needs.prepare.outputs.lerna-release-version }}
          docker push ghcr.io/$REGISTRY_OWNER/$SERVICE_NAME:${{ needs.prepare.outputs.lerna-release-version }}

  tag_create:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - docker_build
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v4
      - name: The Tag is v${{ needs.prepare.outputs.lerna-release-version }}
        shell: bash
        run: echo "The Tag is v${{ needs.prepare.outputs.lerna-release-version }}"
      - name: Create tag v${{ needs.prepare.outputs.lerna-release-version }} in the GIT Repo
        if: false
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ needs.prepare.outputs.lerna-release-version }}',
              sha: context.sha
            })
